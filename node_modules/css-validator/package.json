{
  "name": "css-validator",
  "description": "Validate CSS via W3C's service",
  "version": "0.5.1",
  "homepage": "https://github.com/twolfson/css-validator",
  "author": {
    "name": "Todd Wolfson",
    "email": "todd@twolfson.com",
    "url": "http://twolfson.com/"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/twolfson/css-validator.git"
  },
  "bugs": {
    "url": "https://github.com/twolfson/css-validator/issues"
  },
  "licenses": [
    {
      "type": "UNLICENSE",
      "url": "https://github.com/twolfson/css-validator/blob/master/UNLICENSE"
    }
  ],
  "main": "lib/css-validator",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "mocha"
  },
  "dependencies": {
    "obj-extend": "~0.1.0",
    "sax": "~0.5.5",
    "readable-stream": "~1.1.9",
    "form-data": "~0.1.2"
  },
  "devDependencies": {
    "mocha": "~1.11.0",
    "grunt": "~0.4.1",
    "grunt-contrib-jshint": "~0.6.0",
    "grunt-contrib-watch": "~0.4.0",
    "chai": "~1.8.1",
    "express": "~3.4.8",
    "eight-track": "~1.3.0",
    "underscore": "~1.5.2",
    "eight-track-normalize-multipart": "~0.1.0"
  },
  "keywords": [
    "css",
    "validate",
    "w3c"
  ],
  "readme": "# css-validator [![Build status](https://travis-ci.org/twolfson/css-validator.png?branch=master)](https://travis-ci.org/twolfson/css-validator)\n\nValidate CSS via [W3C's service][jigsaw]\n\n[jigsaw]: http://jigsaw.w3.org/css-validator/\n\nThis was created to validate CSS inside of the [json2css][] test suite.\n\n[json2css]: https://github.com/twolfson/json2css\n\n## Getting Started\nInstall the module with: `npm install css-validator`\n\n```js\nvar validateCss = require('css-validator');\nvalidateCss({text: 'a { color: blue; }'}, function (err, data) {\n  assert.strictEqual(data.validity, true);\n  assert.deepEqual(data.errors, []);\n  assert.deepEqual(data.warnings, []);\n});\n```\n\n## Documentation\n`css-validator` returns a single function as its `module.exports`\n\n### `validateCss(options, cb)`\nValidate CSS against [W3C's Jigsaw validation service][jigsaw]\n\n- options `String|Object` - If `options` is a `String`, it will be treated as `options.text`\n    - w3cUrl `String` - URL to validate against. Default is http://jigsaw.w3.org/css-validator/validator\n    - The following options from the validator itself\n        - Reference: http://jigsaw.w3.org/css-validator/manual.html#api\n    - uri `null|String` - URL of document to validate. CSS and HTML documents are allowed\n    - text `null|String` - CSS to validate\n    - usermedium `String` - Medium where the CSS will be used (e.g. `screen`, `print`, `braille`). Default is `all`.\n    - profile `String` - CSS profile to use for validation. Default is `css3`.\n        - Possible values are\n         `css1`, `css2`, `css21`, `css3`, `svg`, `svgbasic`, `svgtiny`, `mobile`, `atsc-tv`, `tv`, `none`\n    - lang `String` - Language to use in response. Default is `en`\n        - Possible values are `en`, `fr`, `it`, `ko`, `ja`, `es`, `zh-cn`, `nl`, `de`, `it`, `pl`\n    - warning `Number|String` - Warning level to set. Default is `2`\n        - If set to `no`, no warnings will be returned\n        - If set to `0`, less warnings will be returned\n        - If set to `1` or `2`, more warnings will be returned\n- cb `null|Function` - Error first callback with `function (err, data) {}` signature\n    - err `null|Error` - If there was a connetivity error, this will be it\n    - data `null|Object` - Container for response from [jigsaw][]\n        - validity `Boolean` - If there were no errors, this will be `true`. Otherwise, it is `false`.\n        - errors `Object[]` - Array of errors\n            - These are dynamically parsed and not guaranteed to exist. The service only guarantees `line`, `level`, and `message`.\n                - Reference: http://jigsaw.w3.org/css-validator/api.html#soap12message\n            - line `Number` - Line where error occurred\n            - errortype `String`\n            - context `String`\n            - errorsubtype `String`\n            - skippedstring `String` - Content where error occurred\n            - message `String` - Human readable information about the error and why it occurred\n        - warnings `Object[]` - Array of warnings\n            - line `Number` - Line where error occurred\n            - level `Number` - Intensity of the warning. See `options.warning` for more info\n            - message `String` - Human readable information about the warning and why it occurred\n\nIf `cb` is not provided, a [`DuplexStream`][] will be returned to you.\n\nIf you have not provided `options.uri` or `options.text`, you can `.write` + `.end` OR `.pipe` to the stream CSS to validate.\n\nAdditionally, you can use `.read` and `.pipe` to get the `data` returned by `cb`.\n\nThe stream will emit the following events:\n\n- error `Error` - Error occurring during connection or parsing of response\n- data `Object` - Same as `data` sent to `cb`. Emitted once.\n- end - Emitted when we have finished parsing the input and outputting events\n- validity `Boolean` - Event for `data.validity` with `data.validity` as its data\n- validation-error `Object` - Event for a new `data.errors` object with the error as its argument\n- validation-warning `Object` - Event for a new `data.warnings` object with the warning as its argument\n\n[`DuplexStream`]: https://github.com/isaacs/readable-stream#class-streamduplex\n\n## Examples\n```js\nvar cssValidate = require('css-validate');\nvar css = [\n  \"body {\",\n  \"  background: url(ab'cd');\",\n  \"  -moz-box-sizing: content-box;\",\n  \"}\",\n].join('\\n');\n\ncssValidate(css, function (err, data) {\n  console.log(data);\n  /*\n  { validity: false,\n  errors:\n   [ { line: '2',\n       errortype: 'parse-error',\n       context: ' body ',\n       errorsubtype: '\\n                                exp\\n                            ',\n       skippedstring: '\\n                                url(ab \\'cd\\')\\n                            ',\n       message: '\\n        \\n                                Value Error :  background (nullcolors.html#propdef-background)\\n        \\n                                url(ab \\'cd\\') is not a background-color value : \\n                            ',\n       error: '\\n                        ' } ],\n  warnings:\n   [ { line: '3',\n       level: '0',\n       message: 'Property -moz-box-sizing is an unknown vendor extension',\n       warning: '\\n                        ' } ] }\n  */\n});\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint via [grunt](https://github.com/gruntjs/grunt) and test via `npm test`.\n\n## Donating\nSupport this project and [others by twolfson][gittip] via [gittip][].\n\n[![Support via Gittip][gittip-badge]][gittip]\n\n[gittip-badge]: https://rawgithub.com/twolfson/gittip-badge/master/dist/gittip.png\n[gittip]: https://www.gittip.com/twolfson/\n\n## Unlicense\nAs of Nov 27 2013, Todd Wolfson has released this repository and its contents to the public domain.\n\nIt has been released under the [UNLICENSE][].\n\n[UNLICENSE]: UNLICENSE\n",
  "readmeFilename": "README.md",
  "_id": "css-validator@0.5.1",
  "dist": {
    "shasum": "0df264e25a502ab4f3f4665ab228b1164d27e113"
  },
  "_from": "css-validator@~0.5.1",
  "_resolved": "https://registry.npmjs.org/css-validator/-/css-validator-0.5.1.tgz"
}
